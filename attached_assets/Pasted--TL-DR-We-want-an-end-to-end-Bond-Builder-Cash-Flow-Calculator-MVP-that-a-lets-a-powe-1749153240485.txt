* **TL;DR:** We want an end-to-end **Bond Builder + Cash-Flow Calculator MVP** that: (a) lets a power-user create any vanilla, amortizing, callable, or puttable USD bond from scratch, (b) instantly renders its full cash-flow matrix and headline analytics, and (c) does so in a clean retro-Bloomberg interface that can run in one click on Replit. This v1 is strictly single-bond, database-light, and built with free/open libraries.

---

* **Why this matters**

  * **Personal workflow booster** ‚Äì replaces manual YAS spreadsheets and ad-hoc scripts; everything lives in one browser tab.
  * **Flexibility first** ‚Äì any bond definition should be possible, no ‚Äúnot in database‚Äù dead-ends.
  * **Foundation for expansion** ‚Äì future OCR upload, price/yield solver, or portfolio layer will plug into the same schema and API.

* **User story**

  * ‚ÄúAs Juan, an EM fixed-income investor, I drop a new prospectus or type the bond terms, hit **Build**, and within seconds see every coupon, amortization hit, call/put option, yield-to-worst, duration, and average life‚Äîready to sanity-check against market price.‚Äù

---

### üèÅ **Definition of Done**

* UI accepts all required bond fields and optional schedules.
* Pressing **Build** returns a validated JSON cash-flow table and headline stats.
* Five hard-coded ‚Äúgolden bonds‚Äù in tests pass with zero errors.
* One `Run` button on Replit starts both FastAPI (port 8000) and React (port 5173).

---

### üó∫Ô∏è **Architecture at a glance**

* **Frontend** ‚Äì React + Tailwind, monospace green-on-black for YAS nostalgia.
* **Backend** ‚Äì FastAPI, Pydantic for strict schema, pure-Python `cashflow.py`.
* **No DB yet** ‚Äì store bond draft in browser LocalStorage; golden bonds keep tests self-contained.
* **Optional hooks** ‚Äì commented imports for QuantLib and OCR micro-service stubs.

---

### üß© **Key coding blocks**

| Block             | Purpose                                                                           | Success output                                              |
| ----------------- | --------------------------------------------------------------------------------- | ----------------------------------------------------------- |
| `schema.py`       | One Pydantic model describing **header** + three **schedules** (amort, call, put) | `.validate()` either raises `<2 ms` or returns clean object |
| `cashflow.py`     | Generate coupons, apply amortization, overlay options, compute remaining notional | List of dicts: `[{date, cash, type, rem_notional}]`         |
| `api.py`          | `/build`, `/validate`, `/sample/{id}`                                             | JSON cash-flows ‚â§ 50 ms for plain bond                      |
| `BondForm.tsx`    | Single-page input grid with live preview                                          | No page reload; errors highlight red                        |
| `PreviewPane.tsx` | Table + timeline chart (Chart.js)                                                 | Scrollable list and zoomable timeline                       |

---

### üõ†Ô∏è **Step-by-step sprint**

1. **Project scaffold (2 hrs)**

   * `npx create-vite@latest frontend` ‚Üí Tailwind; `poetry new backend`.
   * `docker-compose.yml` for unified dev.

2. **Back-end core (4 hrs)**

   * Write `BondHeader`, `ScheduleRow`, `BondDefinition`.
   * Build coupon generator (30/360 and ACT/ACT).
   * Add amortization reducer, then option overlay.
   * Return PV check to ensure par bond prices to 100.

3. **Front-end shell (3 hrs)**

   * Static grid with TanStack; mock API.
   * Retro theme (CSS variables for green/black).

4. **Wire API ‚Üî UI (2 hrs)**

   * Axios POST on every edit debounce ‚Üí preview pane.
   * Badges for validation errors.

5. **Unit tests & golden bonds (2 hrs)**

   * Plain 5 % 5-year, amortizing, callable, puttable, combo.
   * Assert coupon counts, principal factors, yield-to-worst against Excel.

6. **Packaging (1 hr)**

   * `make dev`, `make test`, `make deploy`.
   * Replit `.replit` + Nix.

7. **Polish & hand-off (‚â§ 1 hr)**

   * README walkthrough GIF.
   * Commented ‚ÄúTODO OCR‚Äù and ‚ÄúTODO QuantLib‚Äù markers for v1.1.

---

### üî¨ **Acceptance tests**

* **Build speed** ‚Äì <1 s for a 30-year amortizing callable.
* **Accuracy** ‚Äì Coupon cash totals within 1 ¬¢ of spreadsheet.
* **Edge-case guardrails** ‚Äì Red error if dates out of order, over-amortization, or negative notional.
* **Cross-browser** ‚Äì Chrome + Safari latest pass manual smoke test.

---

### üöÄ **Stretch-goal placeholders (commented)**

* **`ocr_extract.py` stub** ‚Äì returns 501 now, but URL path already routed.
* **`pricing_yield.py`** ‚Äì skeleton using QuantLib‚Äôs `CallableFixedRateBondEngine`.
* **DB toggle** ‚Äì Uncomment Supabase connection string to persist saved bonds.

---

Pass this plan verbatim to Replit AI or Bolt; every heading and file path gives it an explicit target, while the narrative explains **what we are trying to achieve**‚Äîan always-available, single-bond workbench that never says ‚Äúunsupported security‚Äù and never needs Bloomberg to sanity-check a term sheet.
