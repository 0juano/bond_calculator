Okay, let's break down how to calculate these fixed-income metrics. The key is understanding what each metric represents and the data needed.

High-Level Overview & Core Concepts

Cash Flow Schedule: This is your primary input. It details when and how much cash (coupons, principal) an investor receives. Your provided image is a perfect example.

Market Price: This is crucial. Most yield and duration measures are relative to the current price an investor would pay for the bond. In your image, the (69.78) under "Total Cash Flow (USD)" for "Payment Number 0" is likely the current market price (represented as a negative cash flow at time 0, i.e., an outflow for the investor).

Discounting: The core of bond math is present value. Future cash flows are worth less today due to the time value of money and risk. We discount them back to the present using a discount rate (which is what we often solve for, e.g., YTM).

Compounding Frequency: Bonds typically have a stated compounding frequency (e.g., semi-annually, annually). This affects how the annual yield is applied to discount cash flows occurring at different intervals. Let's assume semi-annual (n=2) as common, but this should be a parameter. Your data has payments at non-standard intervals, so using "Time (Years)" directly with an effective annual rate or a nominal rate compounded n times is important. PV = CF / (1 + Y/n)^(n*T) where T is time in years.

Calculating Each Metric:

A. Yield to Maturity (YTM)

What it is: The total annual rate of return an investor can expect if they buy the bond at its current market price and hold it until all payments are made (maturity). It's the discount rate that equates the present value (PV) of all future cash flows to the bond's current market price.

Calculation: This is an iterative process (solving for the interest rate in the PV formula).
Price = Σ [CF_i / (1 + YTM/n)^(n*t_i)]
where:

Price = Current market price of the bond (e.g., 69.78 from your data)

CF_i = Cash flow at period i (from "Total Cash Flow (USD)")

t_i = Time in years to cash flow i (from "Time (Years)")

n = Number of compounding periods per year (e.g., 2 for semi-annual)

YTM = Yield to Maturity (the unknown we solve for)

Method: Use a numerical solver (e.g., Newton-Raphson, bisection method, or scipy.optimize.newton / scipy.optimize.brentq in Python). You define an objective function: f(y) = PV(cash_flows, y) - Price. The solver finds y such that f(y) = 0.

B. Yield to Worst (YTW)

What it is: For callable bonds (bonds the issuer can redeem before maturity), YTW is the lowest possible yield an investor might receive. It's the minimum of the Yield to Maturity and the Yield to Call (YTC) for all possible call dates.

Calculation:

Calculate YTM (as above).

If the bond is callable: For each call date and call price:

Construct a new cash flow schedule assuming the bond is called on that date. The final cash flow will be the call price plus any accrued coupon.

Calculate the Yield to Call (YTC) using the same iterative method as YTM, but with this "called" cash flow schedule and the current market price.

YTW = min(YTM, all calculated YTCs).

Your Data: Your provided image doesn't include a call schedule. If there's no call option, then YTW = YTM.

C. Modified Duration (ModDur)

What it is: A measure of a bond's price sensitivity to changes in interest rates. It estimates the percentage change in a bond's price for a 1% (100 basis point) change in its yield.

Calculation:

First, calculate Macaulay Duration (MacDur):
MacDur = Σ [ (t_i * PV(CF_i)) / Price ]
where:

PV(CF_i) = Present value of cash flow i, discounted using the YTM.

Price = Current market price (or sum of all PV(CF_i) if calculated precisely with YTM).

t_i = Time in years to cash flow i.

Then, calculate Modified Duration:
ModDur = MacDur / (1 + YTM/n)

Note: Macaulay Duration is in years. Modified Duration is also often expressed in years but represents a percentage sensitivity.

D. Average Life (Weighted Average Life - WAL)

What it is: The average time, in years, that an investor can expect to have their principal outstanding, weighted by the amount of each principal repayment. It's particularly relevant for amortizing bonds (bonds that repay principal over time, like yours).

Calculation:
AvgLife = Σ [ (t_i * PrincipalPayment_i) / TotalInitialPrincipal ]
where:

t_i = Time in years to principal payment i.

PrincipalPayment_i = The amount of principal repaid at time i (from "Principal Payment (USD)").

TotalInitialPrincipal = The initial total principal of the bond (e.g., if this is a $100 face value bond that amortizes, the sum of all "Principal Payment (USD)" should equal 100, or it might be based on the initial outstanding when purchased). From your data, the sum of "Principal Payment (USD)" from 1 to 12 is 8.00 * 12 = 96. This implies the initial principal related to these cash flows was 96 (or 100 if the 96.0% Remaining Ppal refers to a starting 100). For WAL calculation, use the sum of future principal payments from the perspective of the current analysis.
A common way is AvgLife = Σ [ t_i * (PrincipalPayment_i / Σ PrincipalPayment_i) ].

E. Spread

What it is: The difference in yield between the bond and a benchmark security (typically a risk-free government bond of similar maturity). There are several types:

Nominal Spread (Yield Spread): YTM_bond - YTM_benchmark_bond. Simplest to calculate.

Z-Spread (Zero-volatility Spread): The constant spread that must be added to each point on a benchmark spot yield curve (e.g., Treasury spot curve) to make the PV of the bond's cash flows equal to its market price.
Price = Σ [CF_i / (1 + (SpotRate_i + Z_Spread)/n)^(n*t_i)]
This also requires an iterative solver.

Option-Adjusted Spread (OAS): For bonds with embedded options (like callable bonds). It's the Z-Spread after adjusting for the value of the option. Much more complex, requiring a term structure model.

Calculation (for Z-Spread):

Obtain a benchmark spot yield curve (e.g., Treasury zero-coupon rates for various maturities).

Use an iterative solver to find Z_Spread in the formula above.

Your Data: You don't have a benchmark yield curve provided. The simplest spread you could calculate is a nominal spread if you were given the YTM of a comparable benchmark.

Best Code Approach (Python - High-Level Structure)

Using Python with libraries like pandas for data handling and scipy.optimize for solving is a robust approach.

import pandas as pd
from scipy.optimize import newton, brentq # For YTM, Z-Spread solvers
from datetime import datetime # If you need to calculate time_to_maturity from dates

class BondAnalytics:
    def __init__(self, cash_flow_data, market_price, settlement_date,
                 compounding_freq=2, call_schedule=None, benchmark_spot_curve=None):
        """
        cash_flow_data: DataFrame with columns like 'Payment Date', 'Time (Years)',
                        'Total Cash Flow (USD)', 'Principal Payment (USD)'
        market_price: Current market price of the bond.
        settlement_date: Date for which calculations are being made (t=0).
        compounding_freq: Number of compounding periods per year (e.g., 2 for semi-annual).
        call_schedule: List of tuples [(call_date1, call_price1), ...] (optional)
        benchmark_spot_curve: Function or dict mapping time (years) to spot rate (optional for Z-Spread)
        """
        self.df = cash_flow_data # Assumes 'Time (Years)' is from settlement_date
        self.market_price = market_price
        self.settlement_date = pd.to_datetime(settlement_date)
        self.comp_freq = compounding_freq
        self.call_schedule = call_schedule if call_schedule else []
        self.benchmark_spot_curve = benchmark_spot_curve # e.g., a function: time_in_years -> spot_rate

        # Filter out any past cash flows or the initial price row for PV calculations
        # Your 'Time (Years)' column seems to already be relative to settlement.
        self.future_cfs = self.df[self.df['Time (Years)'] > 0].copy()


    def _present_value_of_cash_flows(self, rate, cfs_df, cash_flow_col='Total Cash Flow (USD)'):
        """Helper to calculate PV of a set of cash flows given a rate."""
        total_pv = 0
        for _, row in cfs_df.iterrows():
            cf = row[cash_flow_col]
            t_years = row['Time (Years)'] # Time from settlement to CF
            # Discount factor: (1 + rate / n)^(n*t)
            discount_factor = (1 + rate / self.comp_freq)**(self.comp_freq * t_years)
            total_pv += cf / discount_factor
        return total_pv

    def calculate_ytm(self, guess_rate=0.05, price_target=None):
        """Calculates Yield to Maturity (or Yield to Call)."""
        price = price_target if price_target is not None else self.market_price

        # Objective function: difference between PV of cash flows and market price
        objective_func = lambda y: self._present_value_of_cash_flows(y, self.future_cfs) - price

        try:
            # Newton-Raphson is generally efficient
            # ytm = newton(objective_func, guess_rate, tol=1e-8, maxiter=100)
            # Brentq is more robust if a bracketing interval is known
            ytm = brentq(objective_func, -0.5, 2.0, xtol=1e-8, maxiter=100) # Search between -50% and 200%
        except (RuntimeError, ValueError) as e:
            print(f"YTM calculation failed: {e}. Try adjusting guess_rate or bounds for brentq.")
            return None
        return ytm

    def calculate_ytw(self):
        """Calculates Yield to Worst."""
        ytm = self.calculate_ytm()
        if ytm is None: return None # Base YTM calculation failed

        yields = [ytm]

        # Store original cash flows to revert after YTC calculations
        original_future_cfs = self.future_cfs.copy()

        for call_info in self.call_schedule:
            call_date_str, call_price_val = call_info # ('YYYY-MM-DD', price)
            call_date = pd.to_datetime(call_date_str)

            # Calculate time to call in years from settlement
            # This requires careful handling of day count conventions if not directly given.
            # For simplicity, let's assume we can derive 'Time (Years)' to call.
            # time_to_call_years = (call_date - self.settlement_date).days / 365.25 # Approximation

            # Create a temporary cash flow schedule for this call scenario
            called_cfs = original_future_cfs[pd.to_datetime(original_future_cfs['Payment Date']) <= call_date].copy()
            if not called_cfs.empty:
                # Adjust the last cash flow to be the call price (plus any accrued coupon if applicable)
                # This depends on whether call_price is clean or dirty. Assume it's the total CF on call.
                # Find the actual time to call for the last cash flow on or before call_date
                last_cf_time_to_call = (call_date - self.settlement_date).days / 365.25 # Example
                
                # Add the call payment itself. The "call_price" might be principal + premium.
                # The key is that the cash flow on call date should be the call_price.
                # If the call date isn't an existing payment date, add it.
                # This part needs precise definition of call_price (is it principal + premium, or total cash?)
                # and how it interacts with regular coupon payments.

                # Simplified: Assume the call happens on a payment date.
                # Modify the 'Total Cash Flow (USD)' for the call date to be call_price_val
                # This is a placeholder for more robust logic
                # self.future_cfs = ... logic to build cash flows up to call date with call price ...
                
                # For now, skipping detailed YTC implementation as it's complex
                # ytc = self.calculate_ytm(price_target=self.market_price) # Using modified self.future_cfs
                # if ytc is not None:
                #     yields.append(ytc)
                pass # Placeholder for YTC calculation

        self.future_cfs = original_future_cfs # Restore original
        return min(y for y in yields if y is not None) if yields else None


    def calculate_macaulay_duration(self, ytm):
        """Calculates Macaulay Duration."""
        if ytm is None: return None
        
        weighted_pv_times_t = 0
        current_price_recalc = 0 # Sum of PVs, should be close to market_price

        for _, row in self.future_cfs.iterrows():
            cf = row['Total Cash Flow (USD)']
            t_years = row['Time (Years)']
            
            pv_cf = cf / ((1 + ytm / self.comp_freq)**(self.comp_freq * t_years))
            weighted_pv_times_t += pv_cf * t_years
            current_price_recalc += pv_cf
        
        if current_price_recalc == 0: return None
        macaulay_duration = weighted_pv_times_t / current_price_recalc
        return macaulay_duration

    def calculate_modified_duration(self, ytm=None):
        """Calculates Modified Duration."""
        if ytm is None:
            ytm = self.calculate_ytm()
        if ytm is None: return None

        mac_dur = self.calculate_macaulay_duration(ytm)
        if mac_dur is None: return None

        mod_dur = mac_dur / (1 + ytm / self.comp_freq)
        return mod_dur

    def calculate_average_life(self):
        """Calculates Weighted Average Life (WAL)."""
        weighted_principal_times_t = 0
        total_principal_repayments = 0

        # Ensure 'Principal Payment (USD)' is numeric
        self.future_cfs['Principal Payment (USD)'] = pd.to_numeric(self.future_cfs['Principal Payment (USD)'], errors='coerce').fillna(0)

        for _, row in self.future_cfs.iterrows():
            principal_payment = row['Principal Payment (USD)']
            t_years = row['Time (Years)']
            
            weighted_principal_times_t += principal_payment * t_years
            total_principal_repayments += principal_payment
            
        if total_principal_repayments == 0:
            print("No principal payments found for Average Life calculation.")
            return None
        
        average_life = weighted_principal_times_t / total_principal_repayments
        return average_life

    def calculate_z_spread(self, guess_spread=0.01):
        """Calculates Z-Spread over a benchmark spot curve."""
        if self.benchmark_spot_curve is None:
            print("Benchmark spot curve not provided for Z-Spread calculation.")
            return None

        def pv_with_spread(spread):
            total_pv = 0
            for _, row in self.future_cfs.iterrows():
                cf = row['Total Cash Flow (USD)']
                t_years = row['Time (Years)']
                
                # Get benchmark spot rate for this maturity (interpolation may be needed)
                # Assuming self.benchmark_spot_curve is a function: time -> rate
                # Or if it's a dict {time: rate}, interpolate.
                # For simplicity, let's assume it's a callable function.
                try:
                    spot_rate = self.benchmark_spot_curve(t_years)
                except TypeError: # if not callable, try dict lookup (needs interpolation for real use)
                    # This is a simplification: use np.interp for proper interpolation from a dict
                    # import numpy as np
                    # sorted_times = sorted(self.benchmark_spot_curve.keys())
                    # sorted_rates = [self.benchmark_spot_curve[t] for t in sorted_times]
                    # spot_rate = np.interp(t_years, sorted_times, sorted_rates)
                    print("Benchmark spot curve needs to be a function or implement interpolation.")
                    return -float('inf') # to make solver fail clearly

                discount_rate = spot_rate + spread
                discount_factor = (1 + discount_rate / self.comp_freq)**(self.comp_freq * t_years)
                total_pv += cf / discount_factor
            return total_pv

        objective_func = lambda s: pv_with_spread(s) - self.market_price
        try:
            # z_spread = newton(objective_func, guess_spread, tol=1e-8, maxiter=100)
            z_spread = brentq(objective_func, -0.5, 2.0, xtol=1e-8, maxiter=100) # Search between -50% and 200%
        except (RuntimeError, ValueError) as e:
            print(f"Z-Spread calculation failed: {e}")
            return None
        return z_spread


Using the Class with Your Data (Example):

Prepare your data: Convert your image to a CSV or construct a Pandas DataFrame.

Payment Number,Payment Date,Coupon Rate (%),Coupon Payment (USD),Principal Payment (USD),Total Cash Flow (USD),Remaining Ppal,Time (Years)
0,08-Jun-25,-,-,-,(69.78),-, -
1,09-Jan-25,0.750%,0.36,8.00,8.36,96.0%,0.4
2,09-Jul-25,0.750%,0.33,8.00,8.33,88.0%,0.1  <-- Note: Time (Years) for row 2 is 0.1, row 3 is 0.6. This implies 'Time (Years)' is not cumulative from previous, but specific to that payment from settlement. My code assumes Time (Years) is time *from settlement to that cash flow*. The image is a bit ambiguous on the 'Time (Years)' for rows 2,3 relative to row 1. If row 1 is 0.4 years from settlement, then row 2 ('09-Jul-25') is *later* than row 1 ('09-Jan-25'). The time sequence in image seems like: Row 1 is 0.4y from 08-Jun-24. Row 2 is 0.1y from 09-Jan-25? The table seems to show time *between payments* for some values, and time *from settlement* for others.

**IMPORTANT CLARIFICATION ON "Time (Years)" from your image:**
- Row 0: Payment Date 08-Jun-25, Time (Years) "-" (This is settlement)
- Row 1: Payment Date 09-Jan-25, Time (Years) 0.4. This is approx 0.56 years from 08-Jun-24, or 0.4 years from settlement. This is the key. Let's assume "Time (Years)" is *time from settlement (08-Jun-25) to the payment date*.
    - 09-Jan-25 to 08-Jun-25 is about -0.4 years. This implies the payment dates given are *future* dates relative to a settlement date that is *before* 08-Jun-25.
    - Let's re-interpret: Settlement is `08-Jun-25` (from row 0).
    - Cash Flow 1: `09-Jan-25` (this date is BEFORE 08-Jun-25, which is problematic for a future cash flow schedule. Your image's payment dates are listed chronologically *increasing* after payment 0)
    - Assuming `08-Jun-25` is the settlement date (t=0), then:
        - CF1: `09-Jan-25` is actually ~0.56 years AFTER `08-Jun-25`. The `0.4` must be specific.
        - Your image's "Time (Years)" column is likely what you should use directly as `t_i`.

Let's assume your "Time (Years)" column is correct as `t_i` for each future cash flow, measured from settlement.
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Csv
IGNORE_WHEN_COPYING_END

Load into DataFrame and instantiate:

# Assuming you have a CSV file: 'bond_cashflows.csv'
# df = pd.read_csv('bond_cashflows.csv')

# Or create it manually from your image (ensure types are correct)
data = {
    'Payment Number': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    'Payment Date': ['08-Jun-25', '09-Jan-25', '09-Jul-25', '09-Jan-26', '09-Jul-26', '09-Jan-27', '09-Jul-27', '09-Jan-28', '09-Jul-28', '09-Jan-29', '09-Jul-29', '09-Jan-30', '09-Jul-30'],
    'Coupon Rate (%)': [None, '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%', '0.750%'],
    'Coupon Payment (USD)': [None, 0.36, 0.33, 0.30, 0.27, 0.24, 0.21, 0.18, 0.15, 0.12, 0.09, 0.06, 0.03],
    'Principal Payment (USD)': [None, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00, 8.00],
    'Total Cash Flow (USD)': [-69.78, 8.36, 8.33, 8.30, 8.27, 8.24, 8.21, 8.18, 8.15, 8.12, 8.09, 8.06, 8.03], # Price as negative
    'Remaining Ppal': [None, '96.0%', '88.0%', '80.0%', '72.0%', '64.0%', '56.0%', '48.0%', '40.0%', '32.0%', '24.0%', '16.0%', '8.0%'],
    'Time (Years)': [0, 0.4, 0.1, 0.6, 1.1, 1.6, 2.1, 2.6, 3.1, 3.6, 4.1, 4.6, 5.1] # Using your 'Time (Years)' column directly for future CFs.
                   # Note: 'Time (Years)' for row 2 (0.1) vs row 1 (0.4) is unusual if dates are sequential.
                   # For this example, I will assume the 'Time (Years)' given is time from settlement.
                   # A more robust way is to calculate time from 'Payment Date' and 'settlement_date'.
                   # If using the provided 'Time (Years)', ensure it's consistent.
                   # The provided 'Time (Years)' for rows 1,2,3: 0.4, 0.1, 0.6 is confusing.
                   # Let's use a cleaned sequence for 'Time (Years)' if the image is just an example.
                   # Based on payment dates and 08-Jun-25 settlement:
                   # CF1 (09-Jan-25): (datetime(2025,1,9) - datetime(2025,6,8)).days / 365.25 -> -0.41 (this date is past if settlement is 08-Jun-25)
                   # This indicates the image's 'Time (Years)' refers to something else, or settlement is earlier.
                   # For the code to work, 'Time (Years)' MUST be time from settlement to the cash flow.
                   # Let's assume the settlement date is 08-Jun-24 and the times in the image ARE CORRECT relative to that.
}
df_raw = pd.DataFrame(data)

# Clean up and prepare data
market_price = abs(df_raw.loc[df_raw['Payment Number'] == 0, 'Total Cash Flow (USD)'].iloc[0])
settlement_date_str = df_raw.loc[df_raw['Payment Number'] == 0, 'Payment Date'].iloc[0] # '08-Jun-25'

# Create the cash flow DataFrame for the class (future cash flows)
# Crucially, "Time (Years)" must be time FROM settlement.
# If '08-Jun-25' is settlement, and first payment is '09-Jan-25', this is ~ -150 days.
# This implies the 'Time (Years)' column in your image is NOT calculated from the 'Payment Date' in row 0.
# Let's assume the 'Time (Years)' column IS the t_i to use.

cfs_for_analysis = df_raw[df_raw['Payment Number'] > 0].copy()
cfs_for_analysis['Payment Date'] = pd.to_datetime(cfs_for_analysis['Payment Date'], format='%d-%b-%y')
cfs_for_analysis['Time (Years)'] = pd.to_numeric(cfs_for_analysis['Time (Years)'])
cfs_for_analysis['Total Cash Flow (USD)'] = pd.to_numeric(cfs_for_analysis['Total Cash Flow (USD)'])
cfs_for_analysis['Principal Payment (USD)'] = pd.to_numeric(cfs_for_analysis['Principal Payment (USD)'])


# Assuming default semi-annual compounding (n=2)
# Let's define a dummy spot curve for Z-spread example:
# def example_spot_curve(t_years):
#    if t_years <=1: return 0.01 # 1%
#    elif t_years <=3: return 0.015 # 1.5%
#    else: return 0.02 # 2%
# Or a dict for interpolation later:
example_spot_curve_dict = {0.5: 0.01, 1.0: 0.012, 2.0: 0.015, 3.0: 0.018, 5.0: 0.02}
# A proper interpolation function should be used with the dict for benchmark_spot_curve
import numpy as np
def interpolated_spot_curve(t_years):
    times = sorted(list(example_spot_curve_dict.keys()))
    rates = [example_spot_curve_dict[t] for t in times]
    return np.interp(t_years, times, rates)


bond = BondAnalytics(cash_flow_data=cfs_for_analysis,
                     market_price=market_price,
                     settlement_date=settlement_date_str, # '08-Jun-25'
                     compounding_freq=2, # Assume semi-annual
                     call_schedule=None, # No call info given
                     benchmark_spot_curve=interpolated_spot_curve) # Pass the function

ytm = bond.calculate_ytm()
ytw = bond.calculate_ytw() # Will be same as YTM if no call schedule
mod_dur = bond.calculate_modified_duration(ytm=ytm) # Pass ytm to avoid recalc
avg_life = bond.calculate_average_life()
z_spread = bond.calculate_z_spread()

print(f"Market Price: {bond.market_price:.2f}")
print(f"YTM: {ytm*100:.4f}%" if ytm is not None else "YTM: Calculation Failed")
print(f"YTW: {ytw*100:.4f}%" if ytw is not None else "YTW: Calculation Failed")
print(f"Modified Duration: {mod_dur:.4f}" if mod_dur is not None else "ModDur: Calculation Failed")
print(f"Average Life: {avg_life:.4f} years" if avg_life is not None else "AvgLife: Calculation Failed")
print(f"Z-Spread: {z_spread*100:.4f}% (bps: {z_spread*10000:.2f})" if z_spread is not None else "Z-Spread: Calculation Failed / No Curve")
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Python
IGNORE_WHEN_COPYING_END

This detailed breakdown should give you a strong foundation. The "strong math model" boils down to correctly applying the PV formulas and using reliable numerical solvers. The robustness comes from careful data handling (especially dates and times) and choosing appropriate solver algorithms. The Python class structure helps organize these calculations. Remember the critical importance of correctly defining t_i (time to cash flow from settlement).